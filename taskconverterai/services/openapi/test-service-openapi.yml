openapi: 3.0.3
info:
  title: Test Service API
  description: |
    Example service for TaskConverterAI demonstration. This service provides basic functionality 
    to showcase how OpenAPI documentation is integrated into the TaskConverterAI platform.
    
    ## Features
    - Health monitoring endpoints
    - User data management
    - Task processing capabilities
    
    ## Authentication
    This is a demo service. In production, authentication would be required.
  version: 1.0.0
  contact:
    name: TaskConverterAI Team
    email: support@taskconverterai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.taskconverterai.com/test/v1
    description: Production server
  - url: https://staging-api.taskconverterai.com/test/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Local development server

tags:
  - name: health
    description: Health monitoring endpoints
  - name: users
    description: User management operations
  - name: tasks
    description: Task processing operations

paths:
  /health:
    get:
      tags:
        - health
      summary: Health check
      description: Returns the current health status of the service
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                timestamp: "2025-10-07T12:00:00Z"
                version: "1.0.0"
                uptime: 3600
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - users
      summary: List users
      description: Retrieve a list of all users
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of users to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: Total number of users
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - users
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              name: "John Doe"
              email: "john.doe@example.com"
              role: "user"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - users
      summary: Update user
      description: Update an existing user
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - users
      summary: Delete user
      description: Delete a user by ID
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks:
    get:
      tags:
        - tasks
      summary: List tasks
      description: Retrieve a list of tasks
      operationId: getTasks
      parameters:
        - name: status
          in: query
          description: Filter tasks by status
          required: false
          schema:
            type: string
            enum: [pending, processing, completed, failed]
        - name: userId
          in: query
          description: Filter tasks by user ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      tags:
        - tasks
      summary: Create task
      description: Create a new task for processing
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{taskId}:
    get:
      tags:
        - tasks
      summary: Get task by ID
      description: Retrieve a specific task by its ID
      operationId: getTaskById
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - version
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Health status of the service
        timestamp:
          type: string
          format: date-time
          description: Current timestamp
        version:
          type: string
          description: Service version
        uptime:
          type: integer
          description: Service uptime in seconds

    User:
      type: object
      required:
        - id
        - name
        - email
        - role
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: [admin, user, viewer]
          description: User's role in the system
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - role
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: [admin, user, viewer]
          default: user
          description: User's role in the system

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: [admin, user, viewer]
          description: User's role in the system

    Task:
      type: object
      required:
        - id
        - title
        - status
        - userId
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique task identifier
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Task title
        description:
          type: string
          maxLength: 1000
          description: Task description
        status:
          type: string
          enum: [pending, processing, completed, failed]
          description: Current task status
        userId:
          type: string
          format: uuid
          description: ID of the user who created the task
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
          description: Task priority
        createdAt:
          type: string
          format: date-time
          description: Task creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        completedAt:
          type: string
          format: date-time
          description: Task completion timestamp

    CreateTaskRequest:
      type: object
      required:
        - title
        - userId
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Task title
        description:
          type: string
          maxLength: 1000
          description: Task description
        userId:
          type: string
          format: uuid
          description: ID of the user creating the task
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
          description: Task priority

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
        details:
          type: object
          description: Additional error details
